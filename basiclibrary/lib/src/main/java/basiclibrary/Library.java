/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.lang.reflect.Array;
import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {
        Library test = new Library();
        System.out.println(test.findUniqueWeather());
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = test.tally(votes);
        System.out.println(winner + " received the most votes!");
    }

    public int[] roll(int n) {
        int[] newArr = new int[n];
        Random r = new Random();
        for (int i = 0; i < newArr.length; i++) {
            newArr[i] = r.nextInt(1, 7);
        }
        return newArr;
    }

    public boolean containsDuplicates(int[] arr) {
        int counter = 0;
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j] == arr[i]) counter++;
            }
        }
        if (counter > 0) {
            return true;
        } else {
            return false;
        }
    }

    public double calcAverages(int[] arr) {
        double sum = 0;
        for (int el : arr) {
            sum += el;
        }
        return sum / arr.length;
    }

    public int[] arrayOfArrays(int[][] arr) {
        int[] lowestAvgArr = arr[0];
        for (int i = 0; i < arr.length; i++) {
            double avg = 0;
            double sum = 0;
            for (int j = 0; j < arr[i].length; j++) {
                sum += arr[i][j];
            }
            if (i == 0) {
                avg = sum / arr[i].length;
            } else if (avg > sum / arr[i].length) {
                avg = sum / arr[i].length;
                lowestAvgArr = arr[i];
            }
        }
        return lowestAvgArr;
    }

    public String findUniqueWeather() {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        ArrayList<Integer> monthlyWeatherList = new ArrayList<>();
        int High = weeklyMonthTemperatures[0][0];
        int Min = weeklyMonthTemperatures[0][0];
        String weatherReport = "";
        for (int[] subarr : weeklyMonthTemperatures) {
            for (int num : subarr) {
                if (num > High) High = num;
                if (num < Min) Min = num;
                monthlyWeatherList.add(num);
            }
        }
        weatherReport += "High: " + High + "\nLow: " +  Min + " ";
        // Get unique weather
        Set<Integer> uniqueWeather = new HashSet<Integer>();
        uniqueWeather.addAll(monthlyWeatherList);
        int i = Min + 1;
        while (i < High) {
            if (!uniqueWeather.contains(i)) {
                weatherReport += "\nNever saw temperature: " + i;
            }
            i++;
        }
        return weatherReport;
    }

    public String tally(List<String> list) {
        Map<String, Integer> tallyMap = new HashMap<>();
        for (String arraylistEl : list) {
            if (tallyMap.containsKey(arraylistEl)) {
                int value = tallyMap.get(arraylistEl);
                tallyMap.put(arraylistEl, value + 1);
            } else {
                tallyMap.put(arraylistEl, 1);
            }
        }
        String key = Collections.max(tallyMap.entrySet(), Map.Entry.comparingByValue()).getKey();
        return key;
    }

}

